<!DOCTYPE html>
<html>

<head>
  <title>
    <%= title %>
  </title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@latest/dist/tabler-icons.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.indigo.min.css">
  <link rel="stylesheet" href="/stylesheets/style.css" />
  <script src="https://cdn.jsdelivr.net/npm/markdown-it@14.1.0/dist/markdown-it.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>

<body>
  <div class="container py-3">
    <h1 class="text-happy"><%= title %></h1>

    <div class="grid">
      <% ["Software Developer", "Data Scientist", "Project Manager"].forEach(job => { %>
      <input type="button" class="predefined-job-title" value="<%= job %>" data-job-title="<%= job %>" />
      <% }) %>
    </div>
    <div class="mb-3">
      <form role="search" id="job-search-form">
        <input type="search" name="jobTitle" placeholder="Or search other job" aria-label="Search" required />
        <input type="submit" value="Search" />
      </form>

      <nav aria-label="breadcrumb" id="stepthrough-nav" hidden>
        <ul>
          <li>
            <a class="nav-link active" href="#job-overview">Overview</a>
          </li>
          <li>
            <a href="#personalize-form-accordion">Personalize</a>
          </li>
          <li>
            <a href="#personalized-steps">Your Personalized Path</a>
          </li>
        </ul>
      </nav>
    </div>

    <progress id="job-overview-progress-bar" hidden></progress>
    <div class="mb-3" id="job-overview" hidden>
      <div class="content"></div>
      <details id="personalize-form-accordion">
        <summary role="button" id="toggle-personalize-form-btn" class="contrast">Personalize these results</summary>
        <form class="" id="personalize-form">
          <div class="mb-3">
            <label for="educationLevel" class="form-label">What is your current level of education?</label>
            <select class="form-select" id="educationLevel" name="educationLevel">
              <option value="" selected>Select your education level</option>
              <% ["High School Diploma","Associate's Degree","Bachelor's Degree", "Master's Degree", "Doctorate"].forEach(item=> { %>
              <option value="<%= item %>">
                <%= item %>
              </option>
              <% }) %>
            </select>
          </div>

          <div class="mb-3">
            <label class="form-label">Are you switching careers?</label>
            <div class="form-check">
              <label class="form-check-label"><input class="form-check-input" type="checkbox" name="careerChange" value="yes" /> Yes</label>
            </div>
          </div>

          <div class="mb-3">
            <label for="currentJob" class="form-label">What is your current job?</label>
            <input type="text" class="form-control" name="currentJob" id="currentJob" placeholder="Enter your current job role" />
          </div>

          <div class="mb-3">
            <label for="learningStyle" class="form-label">How do you prefer to learn new skills?</label>
            <select class="form-select" id="learningStyle" name="learningStyle">
              <option value="" selected>Select your learning style</option>
              <% ["Online Courses","In-person Classes","Bootcamps","Self-taught"].forEach(function(item,index){ %>
              <option value="<%= item %>">
                <%= item %>
              </option>
              <% }) %>
            </select>
          </div>

          <div class="mb-3">
            <label class="form-label">How much time can you dedicate to learning new skills?</label>
            <% ["Full-time", "Part-time" , "Weekends Only" ].forEach(item=> { %>
            <div class="form-check">
              <label class="form-check-label"><input class="form-check-input" type="radio" name="timeCommitment" value="<%= item %>" />
                <%= item %>
              </label>
            </div>
            <% }) %>
          </div>

          <div class="mb-3">
            <label class="form-label">How many years from now would you like to start working in this
              field?</label>
            <input type="number" class="form-control" id="autoSizingInputGroup" min="0" name="timeline" placeholder="Years" />
          </div>

          <div>
            <button type="submit" class="btn btn-primary">
              View personalized career path
            </button>
          </div>
          <input type="hidden" name="jobOverviewMd" id="job-overview-md" />
        </form>

      </details>
    </div>

    <progress id="personalized-steps-progress-bar" hidden></progress>
    <div class="mb-3" id="personalized-steps" hidden>
      <div class="content"></div>
    </div>

    <div id="actions-wrapper" class="mb-3" hidden>
      <button id="open-email-send-dialog-btn" class="secondary me-2">
        <i class="ti ti-mail me-2"></i> Send to self
      </button>
      <button id="print-btn" class="secondary me-2">
        <i class="ti ti-printer me-2"></i> Print
      </button>
      <button id="download-btn" class="primary">
        <i class="ti ti-download"></i> Download
      </button>
    </div>

    <dialog id="email-send-dialog">
      <article>
        <h2>Send Email</h2>
        <input type="email" name="email" id="email-send-input" placeholder="Email">
        <footer>
          <span id="email-send-msg" class="me-2"></span>
          <button id="cancel" class="secondary">
            Cancel
          </button>
          <button id="email-send-btn">Send</button>
        </footer>
      </article>
    </dialog>

    <footer id="made-by">Made by <a href="https://github.com/yemi-f" target="_blank">Yemi</a> in Ottawa üèõÔ∏è</footer>
  </div>


  <script>
    const md = markdownit();

    const jobSearchForm = document.getElementById('job-search-form')
    const predefinedJobTitleBtns = document.querySelectorAll(".predefined-job-title");
    const jobOverview = document.getElementById("job-overview");
    const jobOverviewContent = jobOverview.querySelector(".content");
    const personalizedSteps = document.getElementById("personalized-steps");
    const personalizedStepsContent =
      personalizedSteps.querySelector(".content");
    const jobOverviewProgressBar = document.getElementById('job-overview-progress-bar')
    const personalizedStepsProgressBar = document.getElementById('personalized-steps-progress-bar')
    const madeByFooter = document.getElementById('made-by')

    const personalizeFormAccordion = document.getElementById(
      "personalize-form-accordion"
    );
    const personalizeForm = document.getElementById("personalize-form");
    let selectedJobTitle = "";

    const actionsWrapper = document.getElementById('actions-wrapper')

    const openEmailSendDialogBtn = document.getElementById('open-email-send-dialog-btn')
    const emailSendDialog = document.getElementById('email-send-dialog')
    const emailSendInput = document.getElementById('email-send-input')
    const emailSendBtn = document.getElementById('email-send-btn')
    const emailSendMsg = document.getElementById('email-send-msg')

    const downloadPersonalizedPathBtn = document.getElementById('download-btn')
    const printBtn = document.getElementById('print-btn')

    openEmailSendDialogBtn.addEventListener('click', () => {
      toggleEmailSendDialog()
    })

    emailSendDialog.querySelector(`button#cancel`).addEventListener('click', () => {
      toggleEmailSendDialog()
    })

    document.addEventListener("keydown", (event) => {
      const isEmailSendDialogOpen = emailSendDialog.hasAttribute('open');
      if (event.key === "Escape" && isEmailSendDialogOpen) {
        toggleEmailSendDialog();
      }
    });

    emailSendBtn.addEventListener('click', () => {
      const email = emailSendInput.value;
      const overview = jobOverviewContent.innerHTML;
      const personalizedPath = personalizedStepsContent.innerHTML;
      const body = [overview, personalizedPath]

      if (!email.length) {
        emailSendMsg.textContent = "Email is required";
        emailSendMsg.style.color = "red"
        return;
      }

      postData("/send-email", {
          jobTitle: selectedJobTitle,
          body,
          email
        }, 'json')
        .then((response) => {
          console.log("Success:", response.success);
          if (response.success) {
            console.log("email sent success")
            emailSendMsg.textContent = "Email sent";
            emailSendMsg.style.color = "green"
            emailSendMsg.style.fontWeight = "bold"
            emailSendInput.value = ''
          } else {
            emailSendMsg.textContent = "Failed to send email";
            emailSendMsg.style.color = "red"
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          emailSendMsg.textContent = "Failed to send email";
          emailSendMsg.style.color = "red"
        }).finally(() => {
          setTimeout(() => {
            emailSendMsg.textContent = '';
          }, 5000);
        });
    })

    downloadPersonalizedPathBtn.addEventListener('click', () => {
      downloadTextPDF()
    })

    printBtn.addEventListener('click', () => {
      printContentAsPDF()
    })

    function toggleEmailSendDialog() {
      if (emailSendDialog.hasAttribute('open')) {
        emailSendDialog.removeAttribute('open')
      } else {
        emailSendDialog.setAttribute('open', 1)
      }
    }


    const jobOverviewMd = document.getElementById("job-overview-md");

    predefinedJobTitleBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        jobOverviewContent.innerText = "";
        jobOverview.setAttribute("hidden", 1);
        handleInitialJobSearch(btn.getAttribute("data-job-title"));
      });
    });

    jobSearchForm.addEventListener('submit', (e) => {
      e.preventDefault()
      const formData = new FormData(e.target)
      const jobTitle = formData.get('jobTitle');
      console.log({
        jobTitle
      });

      // handleInitialJobSearch(jobTitle);
    })

    personalizeForm.addEventListener("submit", (e) => {
      e.preventDefault();
      personalizedSteps.setAttribute("hidden", 1);
      handlePersonalizeFormSubmit();
    });

    async function handleInitialJobSearch(jobTitle) {
      console.log({
        jobTitle
      });

      // return;
      toggleElementVisibility(jobOverviewProgressBar)

      postData("/test-chat", {
          jobTitle
        }) //job-overview  /test-chat
        .then((response) => {
          // console.log("Success:", response);
          jobOverviewMd.value = response;
          const html = md.render(response);
          toggleElementVisibility(jobOverviewProgressBar)
          toggleElementVisibility(madeByFooter)

          jobOverviewContent.innerHTML = html;
          jobOverview.removeAttribute("hidden");
          selectedJobTitle = toTitleCase(jobTitle);

          toggleElementVisibility(actionsWrapper)
        })
        .catch((error) => {
          console.error("Error:", error);
        }).finally(
          toggleElementVisibility(madeByFooter)
        );
    }

    function handlePersonalizeFormSubmit(params) {
      const formData = new FormData(personalizeForm);
      const formDataObj = {};
      for (const [key, value] of formData.entries()) {
        formDataObj[key] = value;
      }
      console.log(formDataObj);

      // return;

      toggleElementVisibility(personalizedStepsProgressBar)

      postData("/test-chat-2", { ///personalized-path / test-chat-2
          jobTitle: selectedJobTitle,
          ...formDataObj
        })
        .then((response) => {
          console.log("Success:", response);
          const html = md.render(response);
          toggleElementVisibility(personalizedStepsProgressBar)
          toggleElementVisibility(madeByFooter)

          personalizedStepsContent.innerHTML = `<h1>Your Personalized Career Path</h1>` + html;
          personalizedSteps.removeAttribute("hidden");

          personalizeFormAccordion.removeAttribute('open')
        })
        .catch((error) => {
          console.error("Error:", error);
        }).finally(
          toggleElementVisibility(madeByFooter)
        );
    }

    async function postData(url, data, responseType = 'text') {
      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        let textOrJsonResponse;

        if (responseType === "text") {
          textOrJsonResponse = await response.text()
        } else if (responseType === "json") {
          textOrJsonResponse = await response.json()
        }

        return textOrJsonResponse;
      } catch (error) {
        console.error("Error posting data:", error);
        throw error;
      }
    }

    function toggleElementVisibility(el) {
      if (el.hasAttribute('hidden')) {
        el.removeAttribute('hidden')
      } else {
        el.setAttribute('hidden', 1)
      }
    }

    function printContentAsPDF() {
      const content = jobOverviewContent.innerHTML + personalizedStepsContent.innerHTML;
      const printWindow = window.open('', '', 'height=600,width=800');

      printWindow.document.write(`<html><head><title>${selectedJobTitle}</title>`);
      printWindow.document.write('</head><body>');
      printWindow.document.write(content);
      printWindow.document.write('</body></html>');

      printWindow.document.close();
      printWindow.focus();

      // to ensure the content is loaded before printing
      setTimeout(function() {
        printWindow.print();
        printWindow.close();
      }, 250);
    }

    function downloadTextPDF() {
      const {
        jsPDF
      } = window.jspdf;
      const doc = new jsPDF();

      const elements = [...jobOverviewContent.children, ...personalizedStepsContent.children];

      let yOffset = 10;
      let listItemCounter = 1;

      function addTextToPDF(text, fontSize, indent = 0) {
        doc.setFontSize(fontSize);
        const lines = doc.splitTextToSize(text, 190 - indent);
        doc.text(lines, 10 + indent, yOffset);
        yOffset += 5 * lines.length;

        if (yOffset > 280) {
          doc.addPage();
          yOffset = 10;
        }
      }

      for (let element of elements) {
        switch (element.tagName.toLowerCase()) {
          case 'h1':
            addTextToPDF(element.textContent, 20);
            break;
          case 'h2':
            addTextToPDF(element.textContent, 18);
            break;
          case 'h3':
            addTextToPDF(element.textContent, 16);
            break;
          case 'h4':
            addTextToPDF(element.textContent, 14);
            break;
          case 'p':
            addTextToPDF(element.textContent, 12);
            break;
          case 'ul':
          case 'ol':
            for (let li of element.children) {
              let prefix = element.tagName.toLowerCase() === 'ul' ? '‚Ä¢ ' : `${listItemCounter}. `;
              addTextToPDF(prefix + li.textContent, 12, 5);
              if (element.tagName.toLowerCase() === 'ol') listItemCounter++;
            }
            listItemCounter = 1;
            break;
        }
        yOffset += 5; // add some space between elements
      }

      const filename = selectedJobTitle.split(" ").join("_")
      doc.save(`${filename}.pdf`);
    }

    function toTitleCase(str) {
      return str
        .toLowerCase()
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    }
  </script>
</body>

</html>
