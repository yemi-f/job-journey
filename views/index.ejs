<!DOCTYPE html>
<html>

<head>
  <title>
    <%= title %>
  </title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@latest/dist/tabler-icons.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.indigo.min.css">
  <link rel="stylesheet" href="/stylesheets/style.css" />
  <script src="https://cdn.jsdelivr.net/npm/markdown-it@14.1.0/dist/markdown-it.min.js"></script>
</head>

<body>
  <div class="container">
    <h1 class="text-happy"><%= title %></h1>

    <div class="grid">
      <% ["Software Developer", "Data Scientist", "Project Manager"].forEach(job => { %>
      <input type="button" class="predefined-job-title" value="<%= job %>" data-job-title="<%= job %>" />
      <% }) %>
    </div>
    <div class="mb-3">
      <form role="search" id="job-search-form">
        <input type="search" name="jobTitle" placeholder="Or search other job" aria-label="Search" required />
        <input type="submit" value="Search" />
      </form>

      <nav aria-label="breadcrumb" id="stepthrough-nav" hidden>
        <ul>
          <li>
            <a class="nav-link active" href="#job-overview">Overview</a>
          </li>
          <li>
            <a href="#personalize-form-accordion">Personalize</a>
          </li>
          <li>
            <a href="#personalized-steps">Your Personalized Path</a>
          </li>
        </ul>
      </nav>
    </div>

    <progress id="job-overview-progress-bar" hidden></progress>
    <!-- hidden -->
    <div class="mb-3" id="job-overview" hidden>
      <div class="content"></div>
      <details id="personalize-form-accordion">
        <summary role="button" id="toggle-personalize-form-btn" class="contrast">Personalize these results</summary>
        <form class="" id="personalize-form">
          <div class="mb-3">
            <label for="educationLevel" class="form-label">What is your current level of education?</label>
            <select class="form-select" id="educationLevel" name="educationLevel">
              <option value="" selected>Select your education level</option>
              <% ["High School Diploma","Associate's Degree","Bachelor's Degree", "Master's Degree", "Doctorate"].forEach(item=> { %>
              <option value="<%= item %>">
                <%= item %>
              </option>
              <% }) %>
            </select>
          </div>

          <div class="mb-3">
            <label class="form-label">Are you switching careers?</label>
            <div class="form-check">
              <label class="form-check-label"><input class="form-check-input" type="checkbox" name="careerChange" value="yes" /> Yes</label>
            </div>
          </div>

          <div class="mb-3">
            <label for="currentJob" class="form-label">What is your current job?</label>
            <input type="text" class="form-control" name="currentJob" id="currentJob" placeholder="Enter your current job role" />
          </div>

          <div class="mb-3">
            <label for="learningStyle" class="form-label">How do you prefer to learn new skills?</label>
            <select class="form-select" id="learningStyle" name="learningStyle">
              <option value="" selected>Select your learning style</option>
              <% ["Online Courses","In-person Classes","Bootcamps","Self-taught"].forEach(function(item,index){ %>
              <option value="<%= item %>">
                <%= item %>
              </option>
              <% }) %>
            </select>
          </div>

          <div class="mb-3">
            <label class="form-label">How much time can you dedicate to learning new skills?</label>
            <% ["Full-time", "Part-time" , "Weekends Only" ].forEach(item=> { %>
            <div class="form-check">
              <label class="form-check-label"><input class="form-check-input" type="radio" name="timeCommitment" value="<%= item %>" />
                <%= item %>
              </label>
            </div>
            <% }) %>
          </div>

          <div class="mb-3">
            <label class="form-label">How many years from now would you like to start working in this
              field?</label>
            <input type="number" class="form-control" id="autoSizingInputGroup" min="0" name="timeline" placeholder="Years" />
          </div>

          <div>
            <button type="submit" class="btn btn-primary">
              View personalized career path
            </button>
          </div>
          <input type="hidden" name="jobOverviewMd" id="job-overview-md" />
        </form>

      </details>
    </div>

    <!-- hidden -->
    <!-- form moved to accordion (details) above -->

    <progress id="personalized-steps-progress-bar" hidden></progress>
    <!-- hidden -->
    <div class="mb-3" id="personalized-steps" hidden>
      <div class="content"></div>
    </div>

    <!-- hidden -->
    <div id="actions-wrapper" hidden>
      <button id="open-email-send-dialog-btn" class="secondary me-2">
        <i class="ti ti-mail me-2"></i> Send to self
      </button>
      <button id="download-btn" class="primary">
        <i class="ti ti-download"></i> Download
      </button>
    </div>
  </div>


  <dialog id="email-send-dialog">
    <article>
      <h2>Send Email</h2>
      <input type="email" name="email" id="email-send-input" placeholder="Email">
      <footer>
        <button id="cancel" class="secondary">
          Cancel
        </button>
        <button id="email-send-btn">Send</button>
      </footer>
    </article>
  </dialog>

  <script>
    // TODO: put personalize form in accordion & collapse on results return
    const md = markdownit();
    const queries = new Set();

    const jobSearchForm = document.getElementById('job-search-form')
    const predefinedJobTitleBtns = document.querySelectorAll(".predefined-job-title");
    const jobOverview = document.getElementById("job-overview");
    const jobOverviewContent = jobOverview.querySelector(".content");
    const personalizedSteps = document.getElementById("personalized-steps");
    const personalizedStepsContent =
      personalizedSteps.querySelector(".content");
    const jobOverviewProgressBar = document.getElementById('job-overview-progress-bar')
    const personalizedStepsProgressBar = document.getElementById('personalized-steps-progress-bar')

    const personalizeFormAccordion = document.getElementById(
      "personalize-form-accordion"
    );
    const personalizeForm = document.getElementById("personalize-form");
    let selectedJob = "";

    const actionsWrapper = document.getElementById('actions-wrapper')

    const openEmailSendDialogBtn = document.getElementById('open-email-send-dialog-btn')
    const emailSendDialog = document.getElementById('email-send-dialog')
    const emailSendInput = document.getElementById('email-send-input')
    const emailSendBtn = document.getElementById('email-send-btn')

    openEmailSendDialogBtn.addEventListener('click', () => {
      toggleEmailSendDialog()
    })

    emailSendDialog.querySelector(`button#cancel`).addEventListener('click', () => {
      toggleEmailSendDialog()
    })

    document.addEventListener("keydown", (event) => {
      const isEmailSendDialogOpen = emailSendDialog.hasAttribute('open');
      if (event.key === "Escape" && isEmailSendDialogOpen) {
        toggleEmailSendDialog();
      }
    });

    emailSendBtn.addEventListener('click', () => {
      const email = emailSendInput.value;
      console.log({
        email
      })
    })

    function toggleEmailSendDialog() {
      if (emailSendDialog.hasAttribute('open')) {
        emailSendDialog.removeAttribute('open')
      } else {
        emailSendDialog.setAttribute('open', 1)
      }
    }


    const jobOverviewMd = document.getElementById("job-overview-md");

    predefinedJobTitleBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        jobOverviewContent.innerText = "";
        jobOverview.setAttribute("hidden", 1);
        handleInitialJobSearch(btn.getAttribute("data-job-title"));
      });
    });

    jobSearchForm.addEventListener('submit', (e) => {
      e.preventDefault()
      const formData = new FormData(e.target)
      const jobTitle = formData.get('jobTitle');
      console.log({
        jobTitle
      });

      // handleInitialJobSearch(jobTitle);
    })

    personalizeForm.addEventListener("submit", (e) => {
      e.preventDefault();
      personalizedSteps.setAttribute("hidden", 1);
      handlePersonalizeFormSubmit();
    });

    async function handleInitialJobSearch(jobTitle) {
      console.log({
        jobTitle
      });

      // return;
      toggleElementVisibility(jobOverviewProgressBar)

      postData("/job-overview", {
          jobTitle
        }) //job-overview  /test-chat
        .then((response) => {
          console.log("Success:", response);
          jobOverviewMd.value = response;
          const html = md.render(response);
          toggleElementVisibility(jobOverviewProgressBar)

          jobOverviewContent.innerHTML = html;
          jobOverview.removeAttribute("hidden");
          selectedJob = jobTitle;
          queries.add(jobTitle.toLowerCase());

          toggleElementVisibility(actionsWrapper)
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    function handlePersonalizeFormSubmit(params) {
      const formData = new FormData(personalizeForm);
      const formDataObj = {};
      for (const [key, value] of formData.entries()) {
        formDataObj[key] = value;
      }
      console.log(formDataObj);

      // return;

      toggleElementVisibility(personalizedStepsProgressBar)

      postData("/personalized-path", formDataObj)
        .then((response) => {
          console.log("Success:", response);
          const html = md.render(response);
          toggleElementVisibility(personalizedStepsProgressBar)

          personalizedStepsContent.innerHTML = html;
          personalizedSteps.removeAttribute("hidden");

          personalizeFormAccordion.removeAttribute('open')
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    async function postData(url = "", data = {}) {
      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const textResponse = await response.text();

        return textResponse;
      } catch (error) {
        console.error("Error posting data:", error);
        throw error;
      }
    }

    function toggleElementVisibility(el) {
      if (el.hasAttribute('hidden')) {
        el.removeAttribute('hidden')
      } else {
        el.setAttribute('hidden', 1)
      }
    }
  </script>
</body>

</html>
